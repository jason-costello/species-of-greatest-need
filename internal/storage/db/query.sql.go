// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package storage

import (
	"context"
)

const getCategories = `-- name: GetCategories :many
Select id, name, created_at, updated_at from categories
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
Select id, name, created_at, updated_at from categories where id = $1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotification = `-- name: GetNotification :one
Select id, observation_id, created_at, updated_at, comment, link from notifications where id = $1
`

func (q *Queries) GetNotification(ctx context.Context, id int32) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotification, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.ObservationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Comment,
		&i.Link,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many
Select id, observation_id, created_at, updated_at, comment, link from notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.ObservationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Comment,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObservationByID = `-- name: GetObservationByID :one
Select id, link, species_ID, created_at, updated_at from observations where id = $1
`

func (q *Queries) GetObservationByID(ctx context.Context, id int64) (Observation, error) {
	row := q.db.QueryRowContext(ctx, getObservationByID, id)
	var i Observation
	err := row.Scan(
		&i.ID,
		&i.Link,
		&i.SpeciesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getObservationState = `-- name: GetObservationState :many
Select id, observation_id, volunteer_id, state_id, comment, created_at, updated_at from observation_state
`

func (q *Queries) GetObservationState(ctx context.Context) ([]ObservationState, error) {
	rows, err := q.db.QueryContext(ctx, getObservationState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ObservationState
	for rows.Next() {
		var i ObservationState
		if err := rows.Scan(
			&i.ID,
			&i.ObservationID,
			&i.VolunteerID,
			&i.StateID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getObservationStateByID = `-- name: GetObservationStateByID :one
Select id, observation_id, volunteer_id, state_id, comment, created_at, updated_at from observation_state where id = $1
`

func (q *Queries) GetObservationStateByID(ctx context.Context, id int32) (ObservationState, error) {
	row := q.db.QueryRowContext(ctx, getObservationStateByID, id)
	var i ObservationState
	err := row.Scan(
		&i.ID,
		&i.ObservationID,
		&i.VolunteerID,
		&i.StateID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getObservations = `-- name: GetObservations :many
Select id, link, species_ID, created_at, updated_at from observations
`

func (q *Queries) GetObservations(ctx context.Context) ([]Observation, error) {
	rows, err := q.db.QueryContext(ctx, getObservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Observation
	for rows.Next() {
		var i Observation
		if err := rows.Scan(
			&i.ID,
			&i.Link,
			&i.SpeciesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpecies = `-- name: GetSpecies :many

Select id, name, common_name, created_at, updated_at from species
`

// query.sql
func (q *Queries) GetSpecies(ctx context.Context) ([]Species, error) {
	rows, err := q.db.QueryContext(ctx, getSpecies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Species
	for rows.Next() {
		var i Species
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CommonName,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSpeciesByID = `-- name: GetSpeciesByID :one
Select id, name, common_name, created_at, updated_at from species where id = $1
`

func (q *Queries) GetSpeciesByID(ctx context.Context, id int32) (Species, error) {
	row := q.db.QueryRowContext(ctx, getSpeciesByID, id)
	var i Species
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CommonName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStateByID = `-- name: GetStateByID :one
Select id, category_id, name, created_at, updated_at from states where id = $1
`

func (q *Queries) GetStateByID(ctx context.Context, id int32) (State, error) {
	row := q.db.QueryRowContext(ctx, getStateByID, id)
	var i State
	err := row.Scan(
		&i.ID,
		&i.CategoryID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVolunteerByID = `-- name: GetVolunteerByID :one
Select id, fname, lname, role_id, created_at, updated_at from volunteers where id = $1
`

func (q *Queries) GetVolunteerByID(ctx context.Context, id int32) (Volunteer, error) {
	row := q.db.QueryRowContext(ctx, getVolunteerByID, id)
	var i Volunteer
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVolunteers = `-- name: GetVolunteers :many
Select id, fname, lname, role_id, created_at, updated_at from volunteers
`

func (q *Queries) GetVolunteers(ctx context.Context) ([]Volunteer, error) {
	rows, err := q.db.QueryContext(ctx, getVolunteers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Volunteer
	for rows.Next() {
		var i Volunteer
		if err := rows.Scan(
			&i.ID,
			&i.Fname,
			&i.Lname,
			&i.RoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCategory = `-- name: InsertCategory :exec
Insert into categories(name, created_at, updated_at) values ($1, now(), now())
`

func (q *Queries) InsertCategory(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, insertCategory, name)
	return err
}

const insertNotification = `-- name: InsertNotification :exec
Insert into notifications(observation_id, comment, link, created_at, updated_at) values($1, $2, $3, now(), now())
`

type InsertNotificationParams struct {
	ObservationID int32
	Comment       string
	Link          string
}

func (q *Queries) InsertNotification(ctx context.Context, arg InsertNotificationParams) error {
	_, err := q.db.ExecContext(ctx, insertNotification, arg.ObservationID, arg.Comment, arg.Link)
	return err
}

const insertObservation = `-- name: InsertObservation :exec
Insert into observations(link, created_at, updated_at) values($1,  now(), now())
`

func (q *Queries) InsertObservation(ctx context.Context, link string) error {
	_, err := q.db.ExecContext(ctx, insertObservation, link)
	return err
}

const insertObservationState = `-- name: InsertObservationState :exec
Insert into observation_state(observation_id, volunteer_id, state_id, comment, created_at, updated_at) values($1, $2, $3, $4, now(), now())
`

type InsertObservationStateParams struct {
	ObservationID int32
	VolunteerID   int64
	StateID       int64
	Comment       string
}

func (q *Queries) InsertObservationState(ctx context.Context, arg InsertObservationStateParams) error {
	_, err := q.db.ExecContext(ctx, insertObservationState,
		arg.ObservationID,
		arg.VolunteerID,
		arg.StateID,
		arg.Comment,
	)
	return err
}

const insertSpecies = `-- name: InsertSpecies :exec
Insert into species(id, name, common_name, created_at) values($1, $2, $3, now())
`

type InsertSpeciesParams struct {
	ID         int32
	Name       string
	CommonName string
}

func (q *Queries) InsertSpecies(ctx context.Context, arg InsertSpeciesParams) error {
	_, err := q.db.ExecContext(ctx, insertSpecies, arg.ID, arg.Name, arg.CommonName)
	return err
}

const insertState = `-- name: InsertState :exec
Insert into states(category_id, name, created_at, updated_at) values($1, $2, now(), now())
`

type InsertStateParams struct {
	CategoryID int32
	Name       string
}

func (q *Queries) InsertState(ctx context.Context, arg InsertStateParams) error {
	_, err := q.db.ExecContext(ctx, insertState, arg.CategoryID, arg.Name)
	return err
}

const insertVolunteer = `-- name: InsertVolunteer :exec
Insert into volunteers(fname, lname, role_id, created_at, updated_at) values($1, $2, $3, NOW(), NOW())
`

type InsertVolunteerParams struct {
	Fname  string
	Lname  string
	RoleID int32
}

func (q *Queries) InsertVolunteer(ctx context.Context, arg InsertVolunteerParams) error {
	_, err := q.db.ExecContext(ctx, insertVolunteer, arg.Fname, arg.Lname, arg.RoleID)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
Update categories set name=$1 where id = $2
`

type UpdateCategoryParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Name, arg.ID)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
Update notifications set observation_id = $1,comment = $2, link = $3 where id = $4
`

type UpdateNotificationParams struct {
	ObservationID int32
	Comment       string
	Link          string
	ID            int32
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, updateNotification,
		arg.ObservationID,
		arg.Comment,
		arg.Link,
		arg.ID,
	)
	return err
}

const updateObservation = `-- name: UpdateObservation :exec
Update observations set link = $1 where id = $2
`

type UpdateObservationParams struct {
	Link string
	ID   int64
}

func (q *Queries) UpdateObservation(ctx context.Context, arg UpdateObservationParams) error {
	_, err := q.db.ExecContext(ctx, updateObservation, arg.Link, arg.ID)
	return err
}

const updateObservationState = `-- name: UpdateObservationState :exec
Update observation_state set observation_id = $1, volunteer_id= $2, state_id = $3, comment=$4 where id = $1
`

type UpdateObservationStateParams struct {
	ObservationID int32
	VolunteerID   int64
	StateID       int64
	Comment       string
}

func (q *Queries) UpdateObservationState(ctx context.Context, arg UpdateObservationStateParams) error {
	_, err := q.db.ExecContext(ctx, updateObservationState,
		arg.ObservationID,
		arg.VolunteerID,
		arg.StateID,
		arg.Comment,
	)
	return err
}

const updateSpecies = `-- name: UpdateSpecies :exec
Update species set name = $1, common_name=$2 where id = $3
`

type UpdateSpeciesParams struct {
	Name       string
	CommonName string
	ID         int32
}

func (q *Queries) UpdateSpecies(ctx context.Context, arg UpdateSpeciesParams) error {
	_, err := q.db.ExecContext(ctx, updateSpecies, arg.Name, arg.CommonName, arg.ID)
	return err
}

const updateState = `-- name: UpdateState :exec
Update states set category_id = $1, name= $2 where id = $1
`

type UpdateStateParams struct {
	CategoryID int32
	Name       string
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) error {
	_, err := q.db.ExecContext(ctx, updateState, arg.CategoryID, arg.Name)
	return err
}

const updateVolunteer = `-- name: UpdateVolunteer :exec
Update volunteers set fname  = $1, lname=$2, role_id=$3 where id = $4
`

type UpdateVolunteerParams struct {
	Fname  string
	Lname  string
	RoleID int32
	ID     int32
}

func (q *Queries) UpdateVolunteer(ctx context.Context, arg UpdateVolunteerParams) error {
	_, err := q.db.ExecContext(ctx, updateVolunteer,
		arg.Fname,
		arg.Lname,
		arg.RoleID,
		arg.ID,
	)
	return err
}
